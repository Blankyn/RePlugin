apply plugin: 'maven'


//加载本地maven私服配置（在工程根目录中的local.properties文件中进行配置）
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def artifactory_user = properties.getProperty("artifactory_user")
def artifactory_password = properties.getProperty("artifactory_password")
def artifactory_snapshot_url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
def artifactory_release_url = 'https://s01.oss.sonatype.org/content/repositories/releases/'

// 项目引用的版本号，比如compile 'com.yanzhenjie:andserver:1.0.1'中的1.0.1就是这里配置的。
def artifact_version = '3.0.3-SNAPSHOT' //-SNAPSHOT
// 唯一包名，比如compile 'com.yanzhenjie:andserver:1.0.1'中的com.yanzhenjie就是这里配置的。
def artifact_group = 'io.github.blankyn'
def artifact_id = 'replugin-plugin-gradle'
group = artifact_group
version = artifact_version
def debug_flag = false //true: 发布到本地maven仓库， false： 发布到maven私服


uploadArchives {
    repositories {
        mavenDeployer {
            //deploy到maven仓库
            if (debug_flag) {
                repository(url: uri('repo-local')) //deploy到本地仓库
            } else {//deploy到maven私服中
                repository(url: artifactory_release_url) {
                    authentication(userName: artifactory_user, password: artifactory_password)
                }
                snapshotRepository(url: artifactory_snapshot_url) {
                    authentication(userName: artifactory_user, password: artifactory_password)
                }
            }

            pom.groupId = artifact_group
            pom.artifactId = artifact_id
            pom.version = artifact_version
            pom.packaging = 'jar'
            pom.project {
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }


    task sourcesJar(type: Jar) {
        from project.file('src/main/groovy')
        classifier = 'sources'
    }


    artifacts {
        archives sourcesJar
    }
}
